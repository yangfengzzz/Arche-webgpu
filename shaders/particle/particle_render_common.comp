#ifndef SHADERS_RENDER_GLSL_
#define SHADERS_RENDER_GLSL_

layout(set = 0, binding = 5) uniform particleData {
    vec3 birth_gradient;
    float min_particle_size;
    vec3 death_gradient;
    float max_particle_size;
    uint color_mode;
    float fade_coefficient;
    float debug_draw;
    float pad;
};

/* Map a range from [edge0, edge1] to [0, 1]. */
float maprange(float edge0, float edge1, float x) {
    return clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
}

// ----------------------------------------------------------------------------

/* Map a value in [0, 1] to peak at edge. */
float curve_inout(in float x, in float edge) {
    // Coefficient for sub range.
    float a = maprange(0.0f, edge, x);
    float b = maprange(edge, 1.0f, x);

    // Quadratic ease-in / quadratic ease-out.
    float easein = a * (2.0f - a);// a * a;
    float easeout = b*b - 2.0f*b + 1.0f;// 1.0f - b * b;

    // chose between easin / easout function.
    float result = mix(easein, easeout, step(edge, x));

    // Makes particles fade-in and out of existence
    return result;
}

// ----------------------------------------------------------------------------

float compute_size(float z, float decay) {
    const float min_size = min_particle_size;
    const float max_size = max_particle_size;

    // tricks to 'zoom-in' the pointsprite, just set to 1 to have normal size.
    const float depth = (max_size-min_size) / (z);

    float size = mix(min_size, max_size, decay * depth);

    return size;
}

// ----------------------------------------------------------------------------

vec3 base_color(in vec3 position, in float decay) {
    // Gradient mode
    if (color_mode == 1) {
        return mix(birth_gradient, death_gradient, decay);
    }
    // Default mode
    return 0.5f * (normalize(position) + 1.0f);
}

// ----------------------------------------------------------------------------

vec4 compute_color(in vec3 base_color, in float decay, in vec2 texcoord) {
//    if (debug_draw) {
//        return vec4(1.0f);
//    }

    vec4 color = vec4(base_color, 1.0f);

    // Centered coordinates.
    const vec2 p = 2.0f * (texcoord - 0.5f);
    // Pixel intensity depends on its distance from center.
    float d = 1.0f - abs(dot(p, p));

    // Alpha coefficient.
    float alpha = smoothstep(0.0f, 1.0f, d);

    //color = texture(uSpriteSampler2d, texcoord).rrrr;
    color *= alpha * decay * fade_coefficient;

    return color;
}

#endif// SHADERS_RENDER_GLSL_