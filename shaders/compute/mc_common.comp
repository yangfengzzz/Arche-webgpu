#version 450

layout(set = 0, binding = 3) uniform  ConstBuffer_MC {
    vec3 g_Origin;
    float g_CellSize;
    int g_NumCellsX;
    int g_NumCellsY;
    int g_NumCellsZ;

    int g_MaxMarchingCubesVertices;
    float g_MarchingCubesIsolevel;
};

struct StandardVertex {
    vec4 position;
    vec4 normal;
};

//Actually contains floats; make sure to use asfloat() when accessing. uint is used to allow atomics.
layout(binding = 4)
buffer g_SignedDistanceField {
    uint field[];
};

layout(binding = 5)
buffer g_MarchingCubesTriangleVertices {
    StandardVertex vertices[];
};

layout(binding = 6)
buffer g_NumMarchingCubesVertices {
    uint count;
};

layout(binding = 7)
buffer g_MarchingCubesEdgeTable {
    int edgeTable[];
};

layout(binding = 8)
buffer g_MarchingCubesTriangleTable {
    int triTable[];
};

ivec3 GetSdfCellPositionFromIndex(uint sdfCellIndex) {
    uint cellsPerLine = (uint)g_NumCellsX;
    uint cellsPerPlane = (uint)(g_NumCellsX * g_NumCellsY);

    uint numPlanesZ = sdfCellIndex / cellsPerPlane;
    uint remainder = sdfCellIndex % cellsPerPlane;

    uint numLinesY = remainder / cellsPerLine;
    uint numCellsX = remainder % cellsPerLine;

    return ivec3((int)numCellsX, (int)numLinesY, (int)numPlanesZ);
}

vec3 GetSdfCellPosition(ivec3 gridPosition) {
    vec3 cellCenter = vec3(gridPosition.x, gridPosition.y, gridPosition.z) * g_CellSize;
    cellCenter += g_Origin.xyz;

    return cellCenter;
}

int GetSdfCellIndex(ivec3 gridPosition) {
    int cellsPerLine = g_NumCellsX;
    int cellsPerPlane = g_NumCellsX * g_NumCellsY;

    return cellsPerPlane*gridPosition.z + cellsPerLine*gridPosition.y + gridPosition.x;
}

//Relative vertex positions:
//
//		   4-------5
//		  /|      /|
// 		 / |     / |
//		7-------6  |
//		|  0----|--1
//		| /     | /
//		|/      |/
//		3-------2
struct MarchingCube {
    float4 m_vertices[8];
    float m_scalars[8];
};

vec3 VertexLerp(float isolevel, float scalar1, float scalar2, vec4 p1, vec4 p2) {
    //Given 2 points p1, p2 with associated values scalar1, scalar2,
    //we want the linearly interpolated position of a point in between p1 and p2 with a value equal to isolevel.
    //Isolevel should be between scalar1 and scalar2.
    //
    //p = p1 + (p2 - p1) * (isolevel - scalar1) / (scalar2 - scalar1)

    float interp = (isolevel - scalar1) / (scalar2 - scalar1);
    return (p1 + (p2 - p1) * interp).xyz;
}
