#version 450

layout(set = 0, binding = 5) uniform samplerCube environmentMap;
layout(set = 0, binding = 6) uniform lodRoughness {
    float value;
} lod_roughness;
layout(set = 0, binding = 7) uniform textureSize {
    uint value;
} texture_size;

#define PI 3.14159265359
#define RECIPROCAL_PI 0.31830988618

const uint SAMPLE_COUNT = 4096u;

float pow2(const in float x) {
    return x * x;
}

vec4 RGBEToLinear(vec4 value) {
    return vec4(value.rgb * exp2(value.a * 255.0 - 128.0), 1.0);
}

vec4 RGBMToLinear(vec4 value, float maxRange) {
    return vec4(value.rgb * value.a * maxRange, 1.0);
}

vec4 gammaToLinear(vec4 srgbIn){
    return vec4(pow(srgbIn.rgb, vec3(2.2)), srgbIn.a);
}

vec4 toLinear(vec4 color){
    vec4 linear;
    #if (DECODE_MODE == 0)
    linear = color;
    #elif (DECODE_MODE == 1)
    linear = gammaToLinear(color);
    #elif (DECODE_MODE == 2)
    linear = RGBEToLinear(color);
    #elif (DECODE_MODE == 3)
    linear = RGBMToLinear(color, 5.0);
    #endif

    return linear;
}

vec4 linearToRGBE(vec4 value) {
    float maxComponent = max(max(value.r, value.g), value.b);
    float fExp = clamp(ceil(log2(maxComponent)), -128.0, 127.0);
    return vec4(value.rgb / exp2(fExp), (fExp + 128.0) / 255.0);
}

vec4 LinearToRGBM(vec4 value, float maxRange) {
    float maxRGB = max(value.r, max(value.g, value.b));
    float M = clamp(maxRGB / maxRange, 0.0, 1.0);
    M = ceil(M * 255.0) / 255.0;
    return vec4(value.rgb / (M * maxRange), M);
}

// Microfacet Models for Refraction through Rough Surfaces - equation (33)
// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html
// alpha is "roughness squared" in Disneyâ€™s reparameterization
float D_GGX(const in float alpha, const in float dotNH) {

    float a2 = pow2(alpha);

    float denom = pow2(dotNH) * (a2 - 1.0) + 1.0;// avoid alpha = 0 with dotNH = 1

    return RECIPROCAL_PI * a2 / pow2(denom);
}

// ---------------------------------------------------------------------------------------------------------------------
// https://learnopengl.com/PBR/IBL/Specular-IBL
// Hammersley
float radicalInverse_VdC(uint bits) {
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;// / 0x100000000
}

vec2 hammersley(uint i, uint N) {
    return vec2(float(i)/float(N), radicalInverse_VdC(i));
}

// WebGL1 fallback
float VanDerCorpus(uint n, uint base) {
    float invBase = 1.0 / float(base);
    float denom   = 1.0;
    float result  = 0.0;

    for (uint i = 0u; i < 32u; ++i)
    {
        if (n > 0u)
        {
            denom   = mod(float(n), 2.0);
            result += denom * invBase;
            invBase = invBase / 2.0;
            n       = uint(float(n) / 2.0);
        }
    }

    return result;
}

vec2 HammersleyNoBitOps(uint i, uint N) {
    return vec2(float(i)/float(N), VanDerCorpus(i, 2u));
}

// ---------------------------------------------------------------------------------------------------------------------
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness) {
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

vec3 specular(vec3 N) {
    vec3 R = N;
    vec3 V = R;

    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);

    for (uint i = 0u; i < SAMPLE_COUNT; ++i) {
        vec2 Xi = hammersley(i, SAMPLE_COUNT);
        vec3 H  = importanceSampleGGX(Xi, N, lod_roughness.value);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);

        if (NdotL > 0.0) {
            float dotNH = dot(N, H);
            float D   = D_GGX(lod_roughness.value, dotNH);
            float pdf = (D * dotNH / (4.0 * dotNH)) + 0.0001;
            float saTexel  = 4.0 * PI / (6.0 * texture_size.value * texture_size.value);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);
            float mipLevel = lod_roughness.value == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);

            vec4 samplerColor = textureLod(environmentMap, L, mipLevel);
            vec3 linearColor = toLinear(samplerColor).rgb;

            prefilteredColor += linearColor * NdotL;
            totalWeight      += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;
    return prefilteredColor;
}

layout(local_size_x = 8, local_size_y = 8) in;
layout(set = 0, binding = 1) writeonly uniform mediump imageCube o_results;

void main() {
    uint inputWidth = texture_size.value;
    uint width = imageSize(o_results).x;
    float scale = float(inputWidth) / float(width);
    uint face = gl_GlobalInvocationID.z;
    vec2 inputuv = vec2(gl_GlobalInvocationID.xy) / float(inputWidth);

    float cx = inputuv.x * 2. - 1.;
    float cy = inputuv.y * 2. - 1.;

    vec3 dir = vec3(0.);
    if (face == 0) { // PX
        dir = vec3(1., cy, -cx);
    }
    else if (face == 1) { // NX
        dir = vec3(-1., cy, cx);
    }
    else if (face == 2) { // PY
        dir = vec3(cx, -1., cy);
    }
    else if (face == 3) { // NY
        dir = vec3(cx, 1., -cy);
    }
    else if (face == 4) { // PZ
        dir = vec3(cx, cy, 1.);
    }
    else if (face == 5) { // NZ
        dir = vec3(-cx, cy, -1.);
    }
    dir = normalize(dir);

    vec4 color;
    if (lod_roughness.value == 0.) {
        color = toLinear(texture(environmentMap, dir));
    } else {
        vec3 integratedBRDF = specular(dir);
        color = vec4(integratedBRDF, 1.);
    }

    ivec2 outputuv = ivec2(gl_GlobalInvocationID.x/scale, gl_GlobalInvocationID.y/scale);
    imageStore(o_results, ivec3(outputuv, face), color);
}